import os
import logging
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
import config
from datetime import datetime

logger = logging.getLogger(__name__)

# Initialize Slack client
slack_token = config.SLACK_BOT_TOKEN
slack_channel_id = config.SLACK_CHANNEL_ID
slack_client = None

if slack_token and slack_channel_id:
    try:
        slack_client = WebClient(token=slack_token)
        logger.debug("Slack client initialized")
    except Exception as e:
        logger.error(f"Error initializing Slack client: {str(e)}")

def post_message(message: str, blocks=None, channel=None) -> bool:
    """
    [DISABLED - READ ONLY MODE] Post a message to Slack
    
    This function is currently disabled as the application is running in read-only mode.
    
    Args:
        message (str): The message to post
        blocks (list, optional): Slack blocks for rich formatting. Defaults to None.
        channel (str, optional): Channel ID to post to. Defaults to configured channel.
    
    Returns:
        bool: Always returns False (disabled)
    """
    logger.warning("Slack posting is disabled in read-only mode")
    return False

def format_digest_for_slack(digest):
    """
    Format a digest for posting to Slack
    
    Args:
        digest (dict): The digest to format
    
    Returns:
        dict: Slack blocks for the formatted digest
    """
    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": f"CEO Daily Digest - {digest.get('date', 'Today')}",
                "emoji": True
            }
        },
        {
            "type": "divider"
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Executive Summary*"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": digest.get('executive_summary', 'No summary available')
            }
        },
        {
            "type": "divider"
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Key Metrics*"
            }
        }
    ]
    
    # Add key metrics
    metrics_text = ""
    for key, value in digest.get('key_metrics', {}).items():
        metrics_text += f"â€¢ *{key}*: {value}\n"
    
    if metrics_text:
        blocks.append({
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": metrics_text
            }
        })
    
    # Add action items
    blocks.extend([
        {
            "type": "divider"
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": "*Top Priorities*"
            }
        }
    ])
    
    action_items = digest.get('action_items', [])
    if action_items:
        action_items_text = ""
        for i, item in enumerate(action_items[:5], 1):
            action_items_text += f"{i}. {item}\n"
        
        blocks.append({
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": action_items_text
            }
        })
    
    # Add footer
    blocks.extend([
        {
            "type": "divider"
        },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": "Generated by CEO AI Assistant"
                }
            ]
        }
    ])
    
    return blocks

def post_digest_to_slack(digest):
    """
    Post a digest to Slack
    
    Args:
        digest (dict): The digest to post
    
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Create a simplified version of the digest for Slack
        now = datetime.now().strftime("%Y-%m-%d")
        text = f"*Daily Digest for {digest.get('date', now)}*\n\n"
        
        # Add executive summary section
        text += "*Executive Summary:*\n"
        text += f"{digest.get('executive_summary', 'No summary available.')}\n\n"
        
        # Add key metrics section
        text += "*Key Metrics:*\n"
        key_metrics = digest.get('key_metrics', [])
        if key_metrics:
            for metric in key_metrics:
                trend_icon = ""
                if metric.get('trend') == 'up':
                    trend_icon = "ðŸ“ˆ "
                elif metric.get('trend') == 'down':
                    trend_icon = "ðŸ“‰ "
                
                text += f"â€¢ {trend_icon}*{metric.get('name')}*: {metric.get('value')}\n"
        else:
            text += "No metrics available.\n"
        
        text += "\n"
        
        # Add action items section
        text += "*Action Items:*\n"
        for i, item in enumerate(digest.get('action_items', []), 1):
            text += f"{i}. {item}\n"
        
        if not digest.get('action_items'):
            text += "No action items available.\n"
            
        # Post to Slack
        return post_message(text, config.SLACK_CHANNEL_ID)
    except Exception as e:
        logger.error(f"Error posting digest to Slack: {str(e)}")
        return False
