name: CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 safety bandit
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        # Install the package in development mode
        pip install -e .
    
    - name: Run basic tests with coverage
      run: |
        # Set PYTHONPATH to include the current directory
        export PYTHONPATH=$PWD
        pytest -v minimal_tests/test_minimal.py minimal_tests/test_api_integration.py
        
    - name: Run security and access control tests
      run: |
        export PYTHONPATH=$PWD
        pytest -v minimal_tests/test_email_access_control.py
        pytest -v minimal_tests/test_security.py
        pytest -v minimal_tests/test_access_control.py
        
    - name: Run app integration tests
      run: |
        export PYTHONPATH=$PWD
        pytest -v minimal_tests/test_app_integration.py
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ minimal_tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/ tests/ minimal_tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check -r requirements.txt || true
    
    - name: Run Bandit security scanner
      run: |
        bandit -r app/ -x app/tests || true
        
  email-access-verification:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    
    - name: Verify Email Whitelist Integrity
      run: |
        export PYTHONPATH=$PWD
        # Check if AUTHORIZED_EMAILS list is present and contains only the expected emails
        python -c "from utils.access_control import AUTHORIZED_EMAILS; assert len(AUTHORIZED_EMAILS) == 2; assert 'maxriahi@gmail.com' in AUTHORIZED_EMAILS; assert 'mriahi@ooti.co' in AUTHORIZED_EMAILS; print('âœ… Email whitelist validation passed')"
    
    - name: Test Email Access Control
      run: |
        export PYTHONPATH=$PWD
        pytest -v minimal_tests/test_email_access_control.py
    
    - name: Verify Protected Routes
      run: |
        # Check if routes with sensitive data have the restricted_access_required decorator
        grep -r "restricted_access_required" app/ || echo "Warning: No routes with restricted access detected" 