name: Test CEO Assistant AI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Run tests with coverage
      run: |
        pytest -v --cov=app --cov-report=xml --cov-report=term tests/ minimal_tests/
    
    - name: Check coverage threshold
      run: |
        COVERAGE_THRESHOLD=80
        COVERAGE_RESULT=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
        echo "Coverage: $COVERAGE_RESULT%"
        if (( $(echo "$COVERAGE_RESULT < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "::error::Test coverage below threshold: $COVERAGE_RESULT% (required: $COVERAGE_THRESHOLD%)"
          exit 1
        fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ minimal_tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/ tests/ minimal_tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Check for security vulnerabilities in dependencies
      run: |
        safety check -r requirements.txt || true
    
    - name: Run Bandit security scanner
      run: |
        bandit -r app/ -x app/tests || true
        
    - name: Run security-specific tests
      run: |
        # Run email access control tests to ensure only authorized emails can access data
        pytest -v minimal_tests/test_email_access_control.py
        
        # Run API access control tests
        pytest -v minimal_tests/test_api_integration.py
        
        # Run other security tests
        pytest -v minimal_tests/test_security.py
        pytest -v minimal_tests/test_access_control.py

  data-leak-prevention:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Test email access restrictions
      run: |
        echo "Testing email-based access control to prevent data leaks"
        pytest -v minimal_tests/test_email_access_control.py
        
        # Check if unauthorized emails are correctly blocked
        python -c "from utils.access_control import is_authorized_email; assert not is_authorized_email('unauthorized@example.com')"
        
        # Check that our whitelisted emails have access
        python -c "from utils.access_control import is_authorized_email; assert is_authorized_email('maxriahi@gmail.com')"
        python -c "from utils.access_control import is_authorized_email; assert is_authorized_email('mriahi@ooti.co')"
        
    - name: Test API security
      run: |
        echo "Testing API security to prevent unauthorized data access"
        if [ -f minimal_tests/test_api_security.py ]; then pytest -v minimal_tests/test_api_security.py; fi
        
        # Also test our API integration
        pytest -v minimal_tests/test_api_integration.py

