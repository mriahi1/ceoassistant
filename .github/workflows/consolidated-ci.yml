name: Consolidated CI Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  primary-tests:
    name: Primary Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 safety bandit
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
        pip install -e .
    
    - name: Run core tests
      run: |
        export PYTHONPATH=$PWD
        pytest -v --cov=app --cov-report=xml --cov-report=term minimal_tests/
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/ tests/ minimal_tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 app/ tests/ minimal_tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
  security-checks:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest safety bandit
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install -e .
    
    - name: Email access control checks
      run: |
        export PYTHONPATH=$PWD
        echo "üîí Verifying email access restrictions"
        pytest -v minimal_tests/test_email_access_control.py
        
        # Verify email whitelist integrity
        python -c "
        from utils.access_control import AUTHORIZED_EMAILS
        assert 'maxriahi@gmail.com' in AUTHORIZED_EMAILS, 'Required authorized email is missing'
        assert 'mriahi@ooti.co' in AUTHORIZED_EMAILS, 'Required authorized email is missing'
        assert len(AUTHORIZED_EMAILS) == 2, f'Only exactly 2 emails should be authorized, found {len(AUTHORIZED_EMAILS)}'
        print('‚úÖ Authorization whitelist contains only the required emails')
        "
    
    - name: API security checks
      run: |
        export PYTHONPATH=$PWD
        echo "üõ°Ô∏è Testing API security"
        pytest -v minimal_tests/test_api_integration.py minimal_tests/test_access_control.py
    
    - name: Dependency vulnerability scan
      run: |
        echo "üîç Checking for dependencies with known vulnerabilities"
        safety check -r requirements.txt || true
    
    - name: Static code security analysis
      run: |
        echo "üîç Running static code security analysis"
        bandit -r app/ -x app/tests || true
        
    - name: Check for sensitive data exposure
      run: |
        echo "üîç Checking for potential sensitive data exposure"
        grep -r "json.dump\|jsonify" --include="*.py" . | grep -v "test_" | grep -B 2 -A 2 "metrics\|insights\|financial\|revenue" || echo "‚úÖ No obvious sensitive data exposure found"
        
        # Verify protected routes have access control
        echo "üîç Verifying sensitive routes have access control"
        grep -r "restricted_access_required" app/ || echo "‚ö†Ô∏è Warning: No routes with restricted access detected" 